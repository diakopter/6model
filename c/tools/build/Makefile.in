# Makefile.in for 6model/c
# This is the file to edit and commit changes.  Depending on the
# operating system, use 6model/c/Configure.sh or 6model/c/Configure.bat
# to compile and run 6model/c/tools/build/Configure.c which reads from
# 6model/c/tools/build/Makefile.in and generates 6model/c/Makefile.

# Targets that do not produce files (tells the make utility to skip
# looking for such non existent files).
.PHONY: all clean realclean test test01 test02

# Configure.c replaces the words between @ signs.
CC        = @cc@
EXE       = @exe@
O         = @outfile@
RM_RF     = @rm_rf@
THREADS   = @threads@

# The first target is default, will be used by a plain 'make' command.
all: test

# Recipes to build executables
t/01-toolchain/01a-cc.exe: t/01-toolchain/01a-cc.c t/Test.h
	$(CC) $(O) t/01-toolchain/01a-cc.exe t/01-toolchain/01a-cc.c
	-$(RM_RF) 01a-cc.obj

t/01-toolchain/01b-timing.exe: t/01-toolchain/01b-timing.c t/Test.h
	$(CC) $(O) t/01-toolchain/01b-timing.exe t/01-toolchain/01b-timing.c
	-$(RM_RF) 01b-timing.obj

t/01-toolchain/01c-threads.exe: t/01-toolchain/01c-threads.c t/Test.h
	$(CC) $(THREADS) $(O) t/01-toolchain/01c-threads.exe t/01-toolchain/01c-threads.c
	-$(RM_RF) 01c-threads.obj

t/02-components/02a-threads.exe: t/02-components/02a-threads.c \
		src/threads.h src/threads.c t/Test.h
	$(CC) $(O) t/02-components/02a-threads.exe src/threads.c t/02-components/02a-threads.c
	-$(RM_RF) threads.obj 02a-threads.obj

t/02-components/02a-hashtable.exe: t/02-components/02a-hashtable.c \
		src/hashtable.h src/hashtable.c t/Test.h
	$(CC) $(O) t/02-components/02a-hashtable.exe src/hashtable.c t/02-components/02a-hashtable.c
	-$(RM_RF) hashtable.obj 02a-hashtable.obj

t/02-components/02b-heapmanager.exe: t/02-components/02b-heapmanager.c \
		src/heapmanager.h src/heapmanager.c t/Test.h
	$(CC) $(O) t/02-components/02b-heapmanager.exe src/heapmanager.c t/02-components/02b-heapmanager.c
	-$(RM_RF) heapmanager.obj 02b-heapmanager.obj

tools/build/prove$(EXE): tools/build/prove.c
	$(CC) $(O) tools/build/prove$(EXE) tools/build/prove.c
	-$(RM_RF) prove.obj

# Note: test executables are named *.exe on all operating systems so
# that prove can find them
test: test01 test02

# The test01 target checks that the C compiler and so on perform the
# functions needed by the rest of the code.  It is generally unnecessary
# to run this test, but is useful when troubleshooting.
test01: t/01-toolchain/01a-cc.exe t/01-toolchain/01b-timing.exe \
		t/01-toolchain/01c-threads.exe tools/build/prove$(EXE)
	tools/build/prove -e "" --ext ".exe" t/01-toolchain

# The test02 target validates the internal libraries of 6model/c
test02: t/02-components/02a-hashtable.exe tools/build/prove$(EXE)
	tools/build/prove -e "" --ext ".exe" t/02-components

# Miscellaneous targets
clean:
	$(RM_RF) *.exe *.obj *.dll *.lib *.exp src/*~ \
		tools/build/Configure$(EXE) tools/build/prove$(EXE) \
		tools/build/*~ t/01-toolchain/*.exe t/01-toolchain/*~ \
		t/02-components/*.exe t/02-components/*~

realclean: clean
	perl -MExtUtils::Command -e rm_f Makefile

help:
	@echo In this 6model/c directory you can make the following targets:
	@echo "test      - general test as far as 6model has been developed"
	@echo "test01    - test the toolchain, eg C compiler, threads, ICU etc"
	@echo "test02    - test 6model components, eg hashtable, heapmanager etc"
	@echo "clean     - remove all generated files except this Makefile"
	@echo "realclean - remove all generated files including this Makefile"
	@echo "help      - you already found this"
